import torch
from enformer_pytorch import Enformer
import read_sequence
from enformer_pytorch import from_pretrained
import pandas as pd
from tqdm import tqdm
print('package imported')


tracks = [689, 694, 698, 699, 708, 709, 720, 721, 725, 726, 734, 738, 
          749, 759, 762, 765, 768, 782, 784, 785, 789, 797, 802, 805, 809, 818, 819, 
          823, 827, 828, 830, 833, 849, 851, 1105, 1106, 1120, 1121, 1124, 1125, 1130, 
          1131, 1141, 1142, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1157, 1158, 
          1177, 1178, 1180, 1181, 1197, 1198, 1203, 1205, 1209, 1216, 1222, 1228, 1230, 
          1232, 1233, 1388, 1395, 1396, 1399, 1401, 1404, 1413, 1415, 1436, 1438, 1439, 
          1442, 1444, 1446, 1449, 1454, 1461, 1464, 1465, 1466, 1479, 1480, 1484, 1486, 
          1506, 1511, 1515, 1518, 1522, 1524, 1531, 1551, 1552, 1554, 1558, 1559, 1564, 
          1568, 1570, 1575, 1583, 1584, 1586, 1587, 1589, 1595, 1600, 1609, 1614, 1616, 
          1618, 1623, 1624, 1626, 1630, 1633, 1643, 1651, 1653, 1658, 1660, 1668, 1670, 
          1684, 1689, 1690, 1694, 1696, 1701, 1702, 1703, 1704, 1705, 1710, 1714, 1720, 
          1725, 1727, 1733, 1759, 1761, 1764, 1765, 1768, 1772, 1774, 1777, 1780, 1781, 
          1791, 1793, 1795, 1796, 1799, 1806, 1807, 1808, 1813, 1823, 1828, 1853, 1856, 
          1857, 1860, 1868, 1872, 1873, 1876, 1878, 1880, 1887, 1891, 1893, 1898, 1899, 
          1900, 1909, 1912, 1918, 1920, 1922, 1942, 1944, 1951, 1954, 1959, 1961, 1966, 
          1968, 1970, 1978, 1992, 2004, 2005, 2006, 2015, 2016, 2020, 2021, 2025, 2026, 
          2034, 2035, 2037, 2050, 2063, 2070, 2071, 2079, 2080, 2083, 2086, 2087, 2088, 
          2093, 2094, 2096, 2101, 2107, 2116, 2118, 2119, 2125, 2127, 2129, 2130, 2135, 
          2137, 2148, 2156, 2160, 2168, 2171, 2186, 2189, 2192, 2193, 2199, 2200, 2202, 
          2205, 2206, 2208, 2210, 2215, 2219, 2220, 2223, 2227, 2232, 2242, 2244, 2246, 
          2248, 2251, 2259, 2260, 2261, 2265, 2275, 2276, 2281, 2282, 2286, 2288, 2290, 
          2292, 2294, 2295, 2301, 2309, 2314, 2323, 2325, 2332, 2333, 2335, 2336, 2337, 
          2353, 2358, 2364, 2369, 2371, 2396, 2397, 2398, 2399, 2400, 2402, 2415, 2416, 
          2419, 2422, 2428, 2434, 2435, 2439, 2450, 2453, 2460, 2468, 2476, 2488, 2490, 
          2491, 2501, 2504, 2516, 2521, 2524, 2529, 2532, 2533, 2536, 2541, 2544, 2545, 
          2547, 2557, 2558, 2561, 2566, 2576, 2579, 2581, 2587, 2588, 2589, 2592, 2595, 
          2598, 2600, 2601, 2603, 2605, 2607, 2609, 2624, 2633, 2636, 2637, 2638, 2645, 
          2648, 2649, 2651, 2653, 2662, 2673, 2676, 2679, 2680, 2682, 2685, 2686, 2688, 
          2691, 2693, 2697, 2717, 2718, 2731, 2739, 2742, 2746, 2749, 2754, 2756, 2769, 
          2771, 2779, 2785, 2787, 2788, 2793, 2796, 2797, 2805, 2810, 2811, 2814, 2824, 
          2828, 2831, 2840, 2842, 2844, 2845, 2850, 2851, 2853, 2855, 2857, 2860, 2861, 
          2868, 2872, 2885, 2889, 2896, 2905, 2907, 2911, 2915, 2916, 2918, 2926, 2931, 
          2943, 2944, 2948, 2951, 2958, 2959, 2977, 2978, 2983, 2984, 2985, 2988, 2990, 
          2993, 2996, 2999, 3012, 3014, 3020, 3035, 3036, 3038, 3052, 3054, 3057, 3062, 
          3064, 3076, 3079, 3080, 3084, 3088, 3090, 3097, 3098, 3117, 3121, 3124, 3135, 
          3139, 3145, 3147, 3153, 3159, 3160, 3164, 3166, 3167, 3169, 3170, 3171, 3176, 
          3179, 3182, 3184, 3192, 3195, 3201, 3202, 3206, 3207, 3208, 3210, 3217, 3221, 
          3224, 3231, 3232, 3237, 3245, 3249, 3250, 3251, 3253, 3261, 3265, 3268, 3269, 
          3271, 3278, 3279, 3290, 3292, 3298, 3306, 3313, 3319, 3321, 3326, 3333, 3338, 
          3340, 3342, 3344, 3348, 3362, 3370, 3371, 3375, 3380, 3381, 3384, 3385, 3388, 
          3402, 3409, 3412, 3413, 3416, 3418, 3419, 3424, 3428, 3431, 3435, 3442, 3443, 
          3445, 3448, 3449, 3450, 3455, 3466, 3470, 3474, 3481, 3499, 3505, 3517, 3518, 
          3519, 3523, 3524, 3527, 3531, 3534, 3537, 3543, 3544, 3545, 3551, 3554, 3556, 
          3563, 3566, 3567, 3568, 3570, 3572, 3574, 3575, 3578, 3580, 3581, 3584, 3586, 
          3589, 3590, 3591, 3600, 3603, 3606, 3618, 3624, 3636, 3644, 3645, 3652, 3663, 
          3665, 3669, 3673, 3677, 3683, 3691, 3697, 3698, 3699, 3711, 3713, 3714, 3717, 
          3718, 3721, 3727, 3728, 3731, 3742, 3748, 3749, 3753, 3754, 3755, 3757, 3758, 
          3762, 3765, 3766, 3768, 3770, 3779, 3788, 3792, 3793, 3798, 3799, 3813, 3815, 
          3822, 3825, 3827, 3830, 3833, 3841, 3842, 3843, 3845, 3867, 3869, 3874, 3882, 
          3883, 3888, 3904, 3910, 3918, 3931, 3934, 3948, 3950, 3958, 3975, 3976, 3979, 
          3986, 3997, 4000, 4001, 4013, 4015, 4016, 4019, 4021, 4022, 4025, 4030, 4032, 
          4033, 4037, 4039, 4044, 4049, 4051, 4067, 4069, 4082, 4083, 4084, 4090, 4091, 
          4096, 4099, 4101, 4105, 4106, 4108, 4113, 4116, 4119, 4121, 4123, 4125, 4126, 
          4127, 4130, 4133, 4135, 4155, 4156, 4158, 4163, 4165, 4169, 4173, 4174, 4180, 
          4182, 4189, 4191, 4197, 4202, 4211, 4214, 4220, 4226, 4227, 4241, 4243, 4244, 
          4256, 4262, 4265, 4271, 4277, 4279, 4281, 4289, 4291, 4295, 4299, 4305, 4307, 
          4313, 4317, 4320, 4321, 4336, 4337, 4342, 4345, 4346, 4350, 4360, 4367, 4371, 
          4372, 4376, 4379, 4383, 4390, 4392, 4394, 4399, 4400, 4408, 4409, 4420, 4432, 
          4433, 4435, 4438, 4442, 4446, 4449, 4450, 4456, 4457, 4459, 4462, 4478, 4479, 
          4480, 4483, 4484, 4490, 4491, 4492, 4497, 4500, 4502, 4509, 4512, 4515]


model = from_pretrained('EleutherAI/enformer-official-rough', target_length = 128, dropout_rate = 0.1)
print('model loaded')
def make_prediction(sequence):
    seq = torch.tensor(sequence)
    prediction = model(seq)
    return sum(prediction['human'][:,tracks].mean(dim=1).cpu().detach().numpy())




## chromosome
chrom = 19
## number of SNPs
number_snps = 1402
## result file path
result_path = f'/projects/ps-renlab2/sux002/DSC180/local_testing/result/chr{chrom}_numer_{str(number_snps)}_tracks_result.csv'
##Shuffle or Not
random_data = False
## Using specific SNPs
custom_range_data = True
custom_range_data_frame = '/projects/ps-renlab2/sux002/DSC180/local_testing/result/apoe_down5000kb_up10kb_snps.txt'

if custom_range_data == True:
    whole_range_data = pd.read_csv(custom_range_data_frame, delimiter='\t')
    
else:
    whole_range_data = pd.read_csv('../../data/snp_sequence_ranges.txt', delimiter='\t')
print('data_loaded')


if random_data == True:
    # Shuffle the entire DataFrame
    whole_range_data = whole_range_data.sample(frac=1, random_state=42).reset_index(drop=True)
    print('data shuffled')

range_data = whole_range_data[whole_range_data['Chrom'] == chrom]

print('data_selected')

if range_data.shape[0] > number_snps:
    range_data = range_data[:number_snps]

print(range_data)


results = []


for index, row in tqdm(range_data.iterrows(), total=range_data.shape[0], desc="Processing Rows"):
    seq1, seq2 = read_sequence.modify_sequence(row['Allele1'], row['Allele2'], row['Start'], row['End'], row['Position'], str(row['Chrom']))
    difference = make_prediction(seq1) - make_prediction(seq2)
    results.append(difference)

range_data.loc[:, 'Result'] = results


range_data.to_csv(result_path, sep='\t', index=False)
print('data saved')


